trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  webRepository: 'web'
  tag: '$(Build.BuildId)'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Cache@2
      displayName: Cache task
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: CACHE_RESTORED
        
    - script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

    - task: Docker@2
      displayName: 'Build Image'
      inputs:
        repository: 'myrepo'
        command: 'build'
        Dockerfile: 'Dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: 'myimagename'

    - script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar myrepo:myimagename
      displayName: Docker save
      condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

